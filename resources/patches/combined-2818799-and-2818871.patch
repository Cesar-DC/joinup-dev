diff --git a/core/modules/migrate/src/MigrateExecutable.php b/core/modules/migrate/src/MigrateExecutable.php
index c51b278..08ad936 100644
--- a/core/modules/migrate/src/MigrateExecutable.php
+++ b/core/modules/migrate/src/MigrateExecutable.php
@@ -229,7 +229,13 @@ public function import() {
         $save = FALSE;
       }
       catch (MigrateSkipRowException $e) {
-        $id_map->saveIdMapping($row, array(), MigrateIdMapInterface::STATUS_IGNORED);
+        if ($e->getSaveToMap()) {
+          $id_map->saveIdMapping($row, [], MigrateIdMapInterface::STATUS_IGNORED);
+        }
+        if (($message_severity_level = $e->getMessageLevel()) !== FALSE) {
+          // The thrower has requested to log the message in the message table.
+          $this->saveMessage($e->getMessage(), $message_severity_level);
+        }
         $save = FALSE;
       }
 
diff --git a/core/modules/migrate/src/MigrateSkipRowException.php b/core/modules/migrate/src/MigrateSkipRowException.php
index 4fc3eee..996dddd 100644
--- a/core/modules/migrate/src/MigrateSkipRowException.php
+++ b/core/modules/migrate/src/MigrateSkipRowException.php
@@ -16,16 +16,34 @@ class MigrateSkipRowException extends \Exception {
   protected $saveToMap;
 
   /**
+   * Message severity to log exception in message table or FALSE to bypass.
+   *
+   * @var int|false
+   */
+  protected $messageLevel;
+
+  /**
    * Constructs a MigrateSkipRowException object.
    *
    * @param string $message
    *   The message for the exception.
    * @param bool $save_to_map
    *   TRUE to record as STATUS_IGNORED in the map, FALSE to skip silently.
+   * @param bool $message_level
+   *   (optional) A message severity such as MigrationInterface::MESSAGE_ERROR
+   *   or MigrationInterface::MESSAGE_WARNING in order to record the exception
+   *   message in the message table. FALSE to avoid recording the message in the
+   *   message table. Defaults to FALSE.
+   *
+   * @see \Drupal\migrate\Plugin\MigrationInterface::MESSAGE_ERROR
+   * @see \Drupal\migrate\Plugin\MigrationInterface::MESSAGE_WARNING
+   * @see \Drupal\migrate\Plugin\MigrationInterface::MESSAGE_NOTICE
+   * @see \Drupal\migrate\Plugin\MigrationInterface::MESSAGE_INFORMATIONAL
    */
-  public function __construct($message = NULL, $save_to_map = TRUE) {
+  public function __construct($message = NULL, $save_to_map = TRUE, $message_level = FALSE) {
     parent::__construct($message);
     $this->saveToMap = $save_to_map;
+    $this->messageLevel = $message_level;
   }
 
   /**
@@ -38,4 +56,21 @@ public function getSaveToMap() {
     return $this->saveToMap;
   }
 
+  /**
+   * Returns the severity of the message to be logged in table or FALSE.
+   *
+   * @return int|false
+   *   A message severity such as MigrationInterface::MESSAGE_ERROR or
+   *   MigrationInterface::MESSAGE_WARNING in order to record the exception
+   *   message in the message table. FALSE to avoid recording the message in the
+   *   message table.
+   */
+  public function getMessageLevel() {
+    if (!$this->getMessage()) {
+      // Record only if there's a non-empty message.
+      return FALSE;
+    }
+    return $this->messageLevel;
+  }
+
 }
diff --git a/core/modules/migrate/src/Plugin/migrate/source/SourcePluginBase.php b/core/modules/migrate/src/Plugin/migrate/source/SourcePluginBase.php
index 45e2be5..150faca 100644
--- a/core/modules/migrate/src/Plugin/migrate/source/SourcePluginBase.php
+++ b/core/modules/migrate/src/Plugin/migrate/source/SourcePluginBase.php
@@ -207,6 +207,10 @@ public function prepareRow(Row $row) {
     catch (MigrateSkipRowException $e) {
       $skip = TRUE;
       $save_to_map = $e->getSaveToMap();
+      if (($message_severity_level = $e->getMessageLevel()) !== FALSE) {
+        // The thrower has requested to log the message in the message table.
+        $this->idMap->saveMessage($row->getSourceIdValues(), $e->getMessage(), $message_severity_level);
+      }
     }
 
     // We're explicitly skipping this row - keep track in the map table.
