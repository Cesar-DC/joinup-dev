<?xml version="1.0" encoding="UTF-8" ?>

<project name="Joinup" default="help">

    <property file="build.properties.local" />
    <property file="build.properties" />
    <property file="build.properties.dist" />

    <target name="help" description="Phing target list">
        <exec executable="${phing.bin}"
              passthru="true">
            <arg value="-l"/>
        </exec>
    </target>

    <includepath classpath="src/Phing" />

    <echo msg="Loading Drush task." />
    <taskdef name="drush" classname="DrushTask" />

    <echo msg="Loading PHP Codesniffer Configuration task." />
    <taskdef name="phpcodesnifferconfiguration" classname="\DrupalProject\Phing\PhpCodeSnifferConfigurationTask" />

    <echo msg="Loading Remove Patched Packages task." />
    <taskdef name="removepatchedpackages" classname="\DrupalProject\Phing\RemovePatchedPackagesTask" />
    
    <echo msg="Loading AWS additional tasks." />
    <import file="./vendor/continuousphp/aws-sdk-phing/tasks.xml" />
    <property name="aws.profile" value="" />

    <target name="setup-aws">
        <property name="aws.profile" value="" />
        <aws-config region="${aws.region}" profile="${aws.profile}" />
    </target>

    <target name="delete-deployment-group">
        <aws-deploy-delete-deployment-group
                name="${deploy.groupName}"
                application="${deploy.applicationName}" />
    </target>

    <target name="delete-stack" depends="delete-deployment-group">
        <aws-cf-deletestack name="${cf.stackName}" />
    </target>

    <target name="run-stack">
        <aws-cf-runstack
                name="joinup-${cf.stackName}"
                updateOnConflict="true"
                capabilities="CAPABILITY_IAM"
                templatePath="./resources/cloudformation/single-server.template">
            <param name="KeyName" value="${cf.KeyName}" />
            <param name="ApplicationName" value="${deploy.applicationName}" />
            <param name="env" value="${cf.stackName}" />
        </aws-cf-runstack>
    </target>

    <target name="setup-deployment-group">
        <aws-deploy-deployment-group
                name="${cf.stackName}"
                updateOnConflict="true"
                deploymentConfigName="CodeDeployDefault.OneAtATime"
                serviceRole="${deploy.serviceRole}"
                application="${deploy.applicationName}">
            <ec2TagFilter key="env" value="${cf.stackName}" />
        </aws-deploy-deployment-group>
    </target>

    <!-- Make the settings folder writeable so that the installer can copy settings.php. -->
    <target name="writable-settings-folder">
        <chmod mode="0755" failonerror="true" verbose="true" quiet="false" file="${website.settings.dir}" />
    </target>

    <!-- Make settings.php writeable so that the installer save it. -->
    <target name="writable-settings-php">
        <if>
            <available file="${website.settings.php}" type="file" property="website.settings.php.available" />
            <then>
                <chmod mode="0644" failonerror="false" verbose="true" quiet="false" file="${website.settings.php}" />
            </then>
        </if>
    </target>

    <!-- Install the website. -->
    <target name="install" depends="writable-settings-folder, writable-settings-php">
        <drush
            command="site-install"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <option name="db-url" value="${drupal.db.url}"/>
            <option name="site-name" value="${website.site.name}"/>
            <option name="account-name" value="${drupal.admin.username}"/>
            <option name="account-pass" value="${drupal.admin.password}"/>
            <option name="account-mail" value="${drupal.admin.email}"/>
            <param>${website.profile.name}</param>
            <!-- Disable sending of e-mails during installation. -->
            <param>install_configure_form.update_status_module='array(FALSE,FALSE)'</param>
            <param>install_settings_form.sparql.host=${sparql.host}</param>
            <param>install_settings_form.sparql.port=${sparql.port}</param>
        </drush>
    </target>

    <!-- Set up PHP CodeSniffer. -->
    <target name="setup-php-codesniffer" description="Generate the configuration file for PHP CodeSniffer.">
        <if>
            <available file="${phpcs.config}" type="file" property="phpcs.config.available" />
            <then>
                <echo message="Deleting existing PHP Codesniffer default configuration file." />
                <delete file="${phpcs.config}" failonerror="false" />
            </then>
        </if>
        <if>
            <available file="${phpcs.global.config}" type="file" property="phpcs.global.config.available" />
            <then>
                <echo message="Deleting existing PHP Codesniffer global configuration file." />
                <delete file="${phpcs.global.config}" failonerror="false" />
            </then>
        </if>
        <phpcodesnifferconfiguration
            configFile="${phpcs.config}"
            extensions="${phpcs.extensions}"
            files="${phpcs.files}"
            globalConfig="${phpcs.global.config}"
            ignorePatterns="${phpcs.ignore}"
            report="${phpcs.report}"
            showProgress="${phpcs.progress}"
            showSniffCodes="${phpcs.sniffcodes}"
            standard="${phpcs.standard}"
        />

        <!-- Set up the git pre-push hook. -->
        <phingcall target="disable-pre-push"/>
        <if>
            <equals arg1="${phpcs.prepush.enable}" arg2="1" />
            <then>
                <symlink link="${phpcs.prepush.destination}" target="${phpcs.prepush.source}" overwrite="true" />
            </then>
        </if>
    </target>

    <!-- Disable the PHP CodeSniffer pre-push hook. -->
    <target name="disable-pre-push" description="Disable the coding standards check when pushing to a git repository.">
        <delete file="${phpcs.prepush.destination}" failonerror="false" />
    </target>

    <!-- Set up Behat. -->
    <target name="setup-behat" description="Generate the configuration file for Behat.">
        <if>
            <available file="${behat.yml.path}" type="file" property="behat.yml.available" />
            <then>
                <echo message="Deleting existing behat.yml configuration file" />
                <delete file="${behat.yml.path}" failonerror="false" />
            </then>
        </if>
        <echo message="Creating behat.yml configuration file" />
        <loadfile property="behat.yml.content" file="${behat.yml.template}">
            <filterchain>
                <replacetokens>
                    <token key="behat.base_url" value="${behat.base_url}" />
                    <token key="behat.files.path" value="${behat.files.path}" />
                    <token key="website.drupal.dir" value="${website.drupal.dir}" />
                    <token key="behat.subcontexts.path" value="${behat.subcontexts.path}" />
                    <token key="behat.formatter.name" value="${behat.formatter.name}" />
                </replacetokens>
            </filterchain>
        </loadfile>
        <echo message="${behat.yml.content}" file="${behat.yml.path}" />
    </target>

    <!-- Link the site root to the document root of the webserver. -->
    <target
        name="link-docroot"
        description="Create a symlink from the site root to the webserver document root.">
        <symlink link="${server.docroot}" target="${website.drupal.dir}" overwrite="true" />
    </target>

    <!-- Create demo users. -->
    <target name="create-demo-users" description="Create demo users.">
        <foreach list="${drupal.demo.users}" param="drupal.demo.user" target="create-demo-user" delimiter="," />
    </target>

    <!-- Create a demo user. Subtarget of "create-demo-users". -->
    <target name="create-demo-user">
        <drush
            command="user-create"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <option name="mail" value="${drupal.demo.user}@example.com"/>
            <option name="password" value="${drupal.demo.user}"/>
            <param>${drupal.demo.user}</param>
        </drush>
        <drush
            command="user-add-role"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <option name="name" value="${drupal.demo.user}"/>
            <param>${drupal.demo.user}</param>
        </drush>
    </target>

    <!-- Set up development configuration, including on-screen error logging and debugging options. -->
    <target name="enable-dev-settings">
        <phingcall target="writable-settings-folder"/>
        <!-- Copy settings file containing development values, but preserve any existing local settings. -->
        <copy file="${website.settings.local.php.example}" tofile="${website.settings.local.php}" overwrite="false" />
    </target>

    <!-- Enable development modules. -->
    <target name="enable-dev-modules">
        <drush
            command="pm-enable"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <param>${drupal.modules.dev}</param>
        </drush>
    </target>

    <!-- Remove all packages that are patched with cweagans/composer-patches. -->
    <target name="remove-patched-packages">
        <removepatchedpackages
            composerJsonPath="${composer.json}"
        />
    </target>

    <!-- Install Composer dependencies for the build system. -->
    <target name="install-composer-dependencies">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${project.basedir}" />
        </composer>
    </target>

    <target
        name="build-dev"
        description="Build a development environment."
        depends="install-composer-dependencies, setup-behat, setup-php-codesniffer" />

    <target
        name="setup-dev"
        description="Set up 'development mode' for an installed website."
        depends="enable-dev-settings, enable-dev-modules" />

    <target
        name="setup-acceptance"
        description="Set up an acceptance environment."
        depends="create-demo-users" />

    <target
        name="install-dev"
        description="Install the website and set up the development environment."
        depends="install, setup-dev, create-demo-users" />

    <target name="provision-stack"
            description="Provision a stack on AWS"
            depends="setup-aws, run-stack, setup-deployment-group" />

</project>
