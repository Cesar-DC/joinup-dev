<?php

/**
 * @file
 * Functions to support theming in the Joinup theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Unicode;

/**
 * Implements hook_preprocess_page().
 */
function joinup_theme_preprocess_page(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();

  // Set page title.
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

  $route_name = $route_match->getRouteName();
  $blue_header_routes = array(
    'user.login',
    'user.register',
    'user.pass',
    'node.add',
    'node.add_page',
    'rdf_entity.rdf_add',
    'entity.node.edit_form',
    'collection.propose_form',
    'rdf_entity.rdf_add_page',
  );

  if (!empty($route_name) && in_array($route_name, $blue_header_routes)) {
    $variables['is_blue_header'] = TRUE;
    $title = $variables['page']['content']['pagetitle'];
    unset($variables['page']['content']['pagetitle']);
  }

  $entity = $route_match->getParameter('rdf_entity');
  if (!empty($entity)) {
    $entity_type = $entity->getType();
    if ($entity_type == 'collection') {
      $variables['is_collection'] = TRUE;
      $title = $variables['page']['content']['pagetitle'];
      unset($variables['page']['content']['pagetitle']);
    }
  }

  $variables['title'] = $title;
}

/**
 * Implements hook_preprocess_page_title().
 */
function joinup_theme_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  // Array contains create pages.
  $create_content_routes = array(
    'node.add',
    'node.add_page',
    'rdf_entity.rdf_add',
    'rdf_entity.rdf_add_page',
  );

  if (!empty($route_name) && in_array($route_name, $create_content_routes)) {
    $variables['is_create_page'] = TRUE;
  }
}

/**
 * Implements hook_theme_preprocess_menu().
 */
function joinup_theme_preprocess_menu(&$variables) {
  if ($variables['menu_name'] != 'account') {
    return;
  }
  // Set the account logo.
  $account = \Drupal::currentUser()->getAccount();
  $user = user_load($account->id(), TRUE);
  /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $photo */
  $photo = $user->get('field_user_photo')->first();
  $variables['profile_icon'] = '/themes/joinup/images/user-profile-icon.png';
  if ($photo) {
    $reference = $photo->getValue();
    /** @var \Drupal\file\Entity\File $file */
    $file = File::load($reference['target_id']);
    $uri = $file->getFileUri();
    $url = ImageStyle::load('profile_icon')->buildUrl($uri);
    $variables['profile_icon'] = $url;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function joinup_theme_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id']) && $variables['elements']['#id'] == 'joinup_theme_content') {
    $route_match = \Drupal::routeMatch();
    $route_name = $route_match->getRouteName();

    if ($route_name == 'view.collections.page_1') {
      $variables['is_view'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for fieldset.html.twig.
 */
function joinup_theme_preprocess_fieldset(&$variables) {
  // Make sure the "for" attribute is added to the label so it is clear to which
  // of the wrapped elements this label belongs. This is important for
  // accessibility.
  $variables['legend']['attributes'] = new Attribute([
    'for' => $variables['element']['#id'],
  ]);
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function joinup_theme_theme_suggestions_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']) && isset($variables['element']['#type'])) {
    $original_theme_hook = $variables['theme_hook_original'];
    $floating_label_types = array(
      'textfield',
      'url',
      'password',
      'email',
      'entity_autocomplete',
    );

    if ($variables['element']['#type'] == 'form') {
      $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);
    }

    if (isset($variables['element']['#id']) && $variables['element']['#id'] == 'edit-field-ar-owner-actions') {
      $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);
    }

    if (in_array($variables['element']['#type'], $floating_label_types)) {
      if ($original_theme_hook == 'form_element') {
        $suggestions[] = 'form_element__floating';
      }
      elseif ((strpos($original_theme_hook, 'input') !== FALSE)) {
        $suggestions[] = 'input__floating';
      }
    }
    elseif ($variables['element']['#type'] == 'submit') {
      $button_value = Html::cleanCssIdentifier($variables['element']['#value'], array(' ' => '_'));
      $button_value = Unicode::strtolower($button_value);
      $suggestions[] = $original_theme_hook . '__' . $button_value;
    }

    if ($variables['theme_hook_original'] == 'form_element') {
      $original_theme_hook = $variables['theme_hook_original'];
      $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#type']);
    }

    $slider_ids = array(
      'edit-field-ar-elibrary-creation',
      'edit-field-is-elibrary-creation',
      'edit-field-ar-owner-actions-bundle',
    );

    if ($variables['theme_hook_original'] == 'select' && in_array($variables['element']['#id'], $slider_ids)) {
      $original_theme_hook = $variables['theme_hook_original'];
      $suggestions[] = $original_theme_hook . '__slider';
    }
  }

  return $suggestions;
}
