<?php

/**
 * @file
 * Update hooks for joinup_subscription module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\og\Entity\OgMembership;

/**
 * Update all og memberships with being subscribed to community content.
 */
function joinup_subscription_update_8100(&$sandbox) {
  $default_values = [
    ['entity_type' => 'node', 'bundle' => 'discussion'],
    ['entity_type' => 'node', 'bundle' => 'document'],
    ['entity_type' => 'node', 'bundle' => 'event'],
    ['entity_type' => 'node', 'bundle' => 'news'],
  ];

  // Check if we already have added the subscription field. Since this is a
  // batched operation this update hook may run more than once.
  $update_manager = \Drupal::entityDefinitionUpdateManager();
  if (!$storage_definition = $update_manager->getFieldStorageDefinition('subscription_bundles', 'og_membership')) {
    // Clear the field type cache to make sure the new EntityBundlePairItem
    // field type will be available for use.
    \Drupal::service('plugin.manager.field.field_type')->clearCachedDefinitions();

    // Update the entity definitions so that the subscription_bundles field is
    // installed.
    $storage_definition = BaseFieldDefinition::create('entity_bundle_pair')
      ->setLabel(t('Subscribed bundles'))
      ->setDescription(t('Holds the bundles that the user is subscribed to for notifications keyed by their entity type.'))
      ->setCardinality(FieldStorageConfigInterface::CARDINALITY_UNLIMITED)
      ->setRequired(FALSE)
      // By default, the new member gets subscribed to all community content of
      // the group.
      ->setDefaultValue($default_values);
    $update_manager->installFieldStorageDefinition('subscription_bundles', 'og_membership', 'og_membership', $storage_definition);
  }

  if (!isset($sandbox['total'])) {
    $mids = \Drupal::entityQuery('og_membership')->execute();
    $sandbox['total'] = count($mids);
    $sandbox['current'] = 0;
  }

  $memberships_per_batch = 1000;
  $mids = \Drupal::entityQuery('og_membership')
    ->range($sandbox['current'], $memberships_per_batch)
    ->execute();

  foreach (OgMembership::loadMultiple($mids) as $membership) {
    $membership->set('subscription_bundles', $default_values)->save();
  }

  drush_print(($sandbox['current'] + count($mids)) . ' memberships updated.');
  $sandbox['current'] += $memberships_per_batch;
  $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
}

/**
 * Implements hook_update_dependencies().
 *
 * Rdf entity has gone through a major API upgrade. Its upgrade path provides
 * some new config entities that have the highest priority.
 *
 * Set the rdf_entity and rdf_draft updates as a dependency to the
 * joinup_subscription update.
 */
function joinup_subscription_update_dependencies() {
  $dependencies['joinup_subscription'][8100] = [
    'rdf_entity' => 8001,
    'rdf_draft' => 8001,
  ];

  return $dependencies;
}
