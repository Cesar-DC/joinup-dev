<?php

/**
 * @file
 * Provides functionality for the news content entity.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\joinup_news\Guard\JoinupNewsFulfillmentGuard;
use Drupal\og\Og;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function joinup_news_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // @todo Add test coverage for these constraints.
  // @see https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-2500
  if ($entity_type->id() == 'node' && $bundle == 'news') {
    if (!empty($fields['field_news_short_title'])) {
      $fields['field_news_short_title']->addConstraint('UniqueField');
    }
    if (!empty($fields['title'])) {
      $fields['title']->addConstraint('UniqueFieldInBundle', ['bundles' => ['news']]);
    }
  }
}

/**
 * Implements hook_node_access().
 *
 * Interrupts the permissions for updating a node. The permission is not
 * granted if there are no transitions allowed for the current state of the
 * node.
 */
function joinup_news_node_access(EntityInterface $node, $op, AccountInterface $account) {
  if ($node->bundle() != 'news') {
    return AccessResult::neutral();
  }

  switch ($op) {
    case 'view';
      $parent = JoinupNewsFulfillmentGuard::getParent($node);

      /** @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface $access_handler */
      $access_handler = \Drupal::service('entity_type.manager')->getAccessControlHandler('rdf_entity');
      if (!$access_handler->access($parent, 'view', $account)) {
        return AccessResult::forbidden();
      }

      $membership = Og::getMembership($parent, $account);
      if (empty($membership)) {
        return AccessResult::neutral();
      }

      if (!$node->isPublished() && $membership->hasPermission('view any unpublished content')) {
        return AccessResult::allowed();
      }
      break;

    case 'update':
      $allowed_transitions = $node->get('field_state')->first()->getTransitions();
      if (empty($allowed_transitions)) {
        return AccessResult::forbidden();
      }
      break;
  }

  return AccessResult::neutral();
}

/**
 * Returns the appropriate workflow to use for the news entity.
 *
 * The callback ensures that even if the parent is updated and the moderation
 * status changes, it will still use the proper workflow.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *    The news entity.
 *
 * @return string
 *    The id of the workflow to use.
 *
 * @throws Exception
 *    Thrown when the function is called for a different bundle.
 */
function joinup_news_workflow_selector(EntityInterface $entity) {
  if ($entity->bundle() != 'news') {
    throw new Exception("This method can only be called for document entities.");
  }
  /** @var \Drupal\joinup_core\JoinupRelationManager $relation_manager */
  $relation_manager = \Drupal::service('joinup_core.relations_manager');
  $moderation = $relation_manager->getParentModeration($entity);
  return $moderation == 1 ? 'node:news:pre_moderated' : 'node:news:post_moderated';
}
