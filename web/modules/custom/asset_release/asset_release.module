<?php

/**
 * @file
 * Contains hooks regarding the asset_release rdf entity bundle.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\rdf_entity\Entity\Rdf;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function asset_release_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() == 'rdf_entity' && $bundle == 'asset_release' && !empty($fields['label'])) {
    $fields['label']->addConstraint('UniqueSolutionTitle', []);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * This takes care of the reverse reference.
 * When a release is created, it has its isVersionOf pre-filled
 * and is connected to its parent. But the parent needs to have the hasVersion
 * field filled as well.
 */
function asset_release_rdf_entity_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'asset_release' && !empty($entity->get('field_isr_is_version_of')->getValue()[0]['target_id'])) {
    /** @var \Drupal\rdf_entity\RdfInterface $parent */
    $parent = Rdf::load($entity->get('field_isr_is_version_of')->getValue()[0]['target_id']);

    $releases = $parent->get('field_is_has_version')->getValue();
    $releases[] = ['target_id' => $entity->id()];
    $parent->get('field_is_has_version')->setValue($releases);
    $parent->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function asset_release_rdf_entity_update(EntityInterface $entity) {
  if ($entity->bundle() !== 'solution') {
    return;
  }

  /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $has_version */
  $has_version = $entity->get('field_is_has_version');
  foreach ($has_version->referencedEntities() as $release) {
    if ($release->get('field_isr_owner')->getValue() !== $entity->get('field_is_owner')->getValue()) {
      // Release owners are in sync with solution owners.
      $release
        ->set('field_isr_owner', $entity->get('field_is_owner')->getValue())
        ->save();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function asset_release_preprocess_rdf_entity(&$variables) {
  /** @var \Drupal\rdf_entity\RdfInterface $rdf_entity */
  $rdf_entity = $variables['rdf_entity'];
  if ($rdf_entity->bundle() !== 'asset_release') {
    return;
  }
  $variables['full_label'] = new TranslatableMarkup('@label @ver', ['@label' => $rdf_entity->label(), '@ver' => $rdf_entity->field_isr_release_number->value]);

  $is_latest_release = FALSE;
  $field_solution = $rdf_entity->get('field_isr_is_version_of');
  if (!empty($field_solution) && ($solution = $field_solution->entity)) {
    $latest_release = solution_get_latest_release($solution);
    if ($latest_release && $latest_release->id() === $rdf_entity->id()) {
      $is_latest_release = TRUE;
    }
  }
  $variables['is_latest_release'] = $is_latest_release;
}

/**
 * Implements hook_theme().
 */
function asset_release_theme($existing, $type, $theme, $path) {
  return [
    'asset_release_releases_download' => [
      'variables' => ['releases' => []],
    ],
  ];
}
