<?php

/**
 * @file
 * Module handling notifications in joinup.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Markup;
use Drupal\joinup_notification\Event\NotificationEvent;
use Drupal\joinup_notification\NotificationEvents;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function joinup_notification_node_insert(EntityInterface $entity) {
  joinup_notification_dispatch_notification('create', $entity);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * It is really hard to keep track of the from_state since state_machine does
 * not give us access to the initialValue protected property of the StateItem
 * class.
 *
 * Load the unchanged latest version and get the source state and save it to the
 * entity.
 */
function joinup_notification_node_presave(EntityInterface $entity) {
  $bundles = ['document', 'discussion', 'event', 'news'];
  if ($entity->isNew() || !in_array($entity->bundle(), $bundles)) {
    return;
  }
  /** @var \Drupal\state_machine_revisions\RevisionManagerInterface $revision_manager */
  $revision_manager = \Drupal::service('state_machine_revisions.revision_manager');
  $revision = $revision_manager->loadLatestRevision($entity);
  $entity->field_state_initial_value = $revision->get('field_state')->first()->value;
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function joinup_notification_node_update(EntityInterface $entity) {
  joinup_notification_dispatch_notification('update', $entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function joinup_notification_node_delete(EntityInterface $entity) {
  joinup_notification_dispatch_notification('delete', $entity);
}

/**
 * Dispatches a generic notification event.
 *
 * @param string $operation
 *   The CRUD operation string.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 */
function joinup_notification_dispatch_notification($operation, EntityInterface $entity) {
  if (isset($entity->skip_notification) && $entity->skip_notification === TRUE) {
    return;
  }
  $event = new NotificationEvent($operation, $entity);
  $event_dispatcher = \Drupal::getContainer()->get('event_dispatcher');
  $event_dispatcher->dispatch(NotificationEvents::COMMUNITY_CONTENT_CRUD, $event);
}

/**
 * Implements hook_mail_alter().
 *
 * Converts in HTML the mails sent by the user and joinup_user modules.
 *
 * For emails sent by the message_notify module, add a prefix and a suffix.
 */
function joinup_notification_mail_alter(&$message) {
  if ($message['module'] === 'user' || $message['module'] === 'joinup_user') {
    $message['headers']['Content-Type'] = SWIFTMAILER_FORMAT_HTML;
    // Convert new lines to paragraphs and line breaks. Also transform the body
    // to markup.
    // @see swiftmailer_mail()
    $message['body'] = array_map(function ($text) {
      return Markup::create(_filter_autop($text));
    }, $message['body']);
  }

  // Mails sent by the message_notify module are already HTML ready.
  if ($message['module'] === 'message_notify') {
    $message['headers']['Content-Type'] = SWIFTMAILER_FORMAT_HTML;
    $user = user_load_by_mail($message['to']);
    $first_name = !empty($user->get('field_user_first_name')->value) ? $user->get('field_user_first_name')->value : 'Joinup user';
    $prefix = t('<p>Dear @first_name,</p>', ['@first_name' => $first_name]);
    $suffix = t('<p>Kind regards,</p><p>The Joinup Community Team</p>');
    $body = array_merge([$prefix], $message['body'], [$suffix]);
    $message['body'] = $body;
  }
}
