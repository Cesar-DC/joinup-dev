<?php

/**
 * @file
 * The TRR module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function trr_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() === 'rdf_entity' && $bundle === 'solution') {
    $required_taxonomy_fields = [
      'field_is_actor',
      'field_is_business_process',
      'field_is_product_type',
      'field_is_standardization_level',
      'field_is_test_resource_type',
    ];
    foreach ($required_taxonomy_fields as $field) {
      if (isset($fields[$field])) {
        $fields[$field]->addConstraint('RequiredIfOtherFieldHasValue', [
          'field' => 'field_is_solution_type',
          'values' => [
            'http://data.europa.eu/dr8/TestComponent',
            'http://data.europa.eu/dr8/TestService',
            'http://data.europa.eu/dr8/TestScenario',
          ],
        ]);
      }
    }

    $fields['field_is_test_resource_type']->addConstraint('SolutionTestResourceType');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function trr_form_rdf_entity_solution_edit_form_alter(&$form, FormStateInterface $form_state) {
  // Delegate the edit form alteration to the same alter hook
  // as the create form.
  trr_form_rdf_entity_solution_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function trr_form_rdf_entity_solution_form_alter(&$form, FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'trr/solution-trr';
  // Only when the solution category 'Test resource' is selected,
  // a test resource type can be selected.
  $form['#validate'][] = 'trr_form_rdf_entity_solution_form_alter_validate';
}

/**
 * Apply the TRR validation rules.
 */
function trr_form_rdf_entity_solution_form_alter_validate(&$form, FormStateInterface $form_state) {
  // Require 'test resource type' when the solution is a test scenario.
  trr_form__required_test_resource__test_scenario($form, $form_state);
  // Require 'test resource type' when solution is a test component or service.
  trr_form__required_test_resource__component_service($form, $form_state);
}

/**
 * Require 'test resource type' when the solution is a test scenario.
 */
function trr_form__required_test_resource__test_scenario(&$form, FormStateInterface $form_state) {
  $solution_type = trr_form_get_active_solution_type($form_state);
  $test_resource_type = trr_form_get_active_test_resource_type($form_state);
  // Test Component or Test Service selected as Solution type.
  if (!in_array('http://data.europa.eu/dr8/TestScenario', $solution_type)) {
    return;
  }
  $required_test_resource_type = [
    // Test Suite.
    'http://joinup.eu/test-resource-type#5937f06162191',
    // Test case.
    'http://joinup.eu/test-resource-type#5937f0616252b',
    // Test assertion.
    'http://joinup.eu/test-resource-type#5937f061628ec',
    // Document Assertion Set.
    'http://joinup.eu/test-resource-type#5937f06162c71',
  ];
  if ($test_resource_type && !in_array($test_resource_type, $required_test_resource_type)) {
    $form_state->setError($form['field_is_test_resource_type'], t("Test resource type should be either 'Test Suite', 'Test Case', 'Test Assertion' or 'Document Assertion Set' for the given solution type."));
  }
}

/**
 * Require 'test resource type' when solution is a test component or service.
 */
function trr_form__required_test_resource__component_service(&$form, FormStateInterface $form_state) {
  $solution_type = trr_form_get_active_solution_type($form_state);
  // Test resource type.
  $test_resource_type = trr_form_get_active_test_resource_type($form_state);
  // Test Component or Test Service selected as Solution type.
  if (!array_intersect($solution_type, [
    'http://data.europa.eu/dr8/TestComponent',
    'http://data.europa.eu/dr8/TestService',
  ])) {
    return;
  }
  $required_test_resource_type = [
    // Test Bed.
    'http://joinup.eu/test-resource-type#5937f0616111b',
    // Messaging adapter.
    'http://joinup.eu/test-resource-type#5937f06162ff8',
    // Document validator.
    'http://joinup.eu/test-resource-type#5937f0616337f',
  ];
  if (!$test_resource_type) {
    $form_state->setError($form['field_is_test_resource_type'], t("Test resource type is required when the solution type is 'Test Component' or 'Test Service'."));
  }
  elseif (!in_array($test_resource_type, $required_test_resource_type)) {
    $form_state->setError($form['field_is_test_resource_type'], t("Test resource type should be either 'Test Bed', 'Messaging Adapter' or 'Document Validator' for the given solution type."));
  }
}

/**
 * Return the selected 'solution type' terms.
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @return array
 *   Selected terms.
 */
function trr_form_get_active_solution_type(FormStateInterface $form_state) {
  // Solution type.
  $solution_type = [];
  foreach ($form_state->getValue(['field_is_solution_type']) as $element) {
    $solution_type[] = $element['target_id'];
  }
  return $solution_type;
}

/**
 * Return the selected 'test resource type' terms.
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @return mixed
 *   The selected 'test resource type'.
 */
function trr_form_get_active_test_resource_type(FormStateInterface $form_state) {
  $test_resource_type_selector = [
    'field_is_test_resource_type',
    0,
    'target_id',
  ];
  $test_resource_type = $form_state->getValue($test_resource_type_selector);
  return $test_resource_type;
}
