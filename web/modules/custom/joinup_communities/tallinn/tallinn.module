<?php

/**
 * @file
 * Contains functions and hook implementations for the tallinn module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;

define('TALLINN_COMMUNITY_ID', 'http://data.europa.eu/w21/5f4c0dae-f521-4d00-a0cf-e1dce0a128a3');

/**
 * Implements hook_theme().
 */
function tallinn_theme($existing, $type, $theme, $path) {
  return [
    'tallinn_entry' => [
      'variables' => [
        'title' => '',
        'description' => '',
        'status' => [],
        'status_classes' => [],
        'explanation' => [],
        'url' => [],
      ],
      'render' => 'element',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tallinn_preprocess_tallinn_entry(&$variables) {
  if (isset($variables['status']['#attributes']['class'])) {
    $variables['status_classes'] = $variables['status']['#attributes']['class'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tallinn_form_node_tallinn_report_edit_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'tallinn_report_author_uniqueness';
}

/**
 * Validates that each report has a different user as author.
 *
 * @param array $form
 *   The form render array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function tallinn_report_author_uniqueness(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $report */
  $report = $form_object->getEntity();
  $author = User::load($form_state->getValue(['uid', 0, 'target_id']));

  if (!$author->isAnonymous()) {
    // Get all reports, other than the current, that are owned by the same user.
    $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery()
      ->condition('type', 'tallinn_report')
      ->condition('uid', $author->id());
    if (!$report->isNew()) {
      $query->condition('nid', $report->id(), '<>');
    }
    if (($nids = $query->execute()) && ($reports = Node::loadMultiple($nids))) {
      $titles = implode(', ', array_map(function (NodeInterface $report) {
        return "'" . $report->label() . "'";
      }, $reports));
      $form_state->setErrorByName('uid', t('The user %user cannot be set as author of this report as he/she already owns @titles.', [
        '%user' => $author->getDisplayName(),
        '@titles' => $titles,
      ]));
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 *
 * Disallow adding new reports via UI.
 */
function tallinn_node_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return $entity_bundle === 'tallinn_report' ? AccessResult::forbidden() : AccessResult::neutral();
}
