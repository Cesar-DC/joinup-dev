<?php

/**
 * @file
 * Hook implementations for the Joinup Invite module.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\og\OgMembershipInterface;

/**
 * Implements hook_user_cancel().
 *
 * A user account cancellation removes all its invitations.
 */
function joinup_invite_user_cancel($edit, $account, $method) {
  $storage = \Drupal::entityTypeManager()->getStorage('invitation');
  /** @var \Drupal\user\UserInterface $account */
  if ($ids = $storage->getQuery()->condition('uid', $account->id())->execute()) {
    $storage->delete($storage->loadMultiple($ids));
  }
}

/**
 * Implements hook_entity_delete().
 *
 * A content entity deletion should cleanup the related invitations.
 */
function joinup_invite_entity_delete(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface) {
    $storage = \Drupal::entityTypeManager()->getStorage('invitation');
    $ids = $storage->getQuery()
      ->condition('entity_type', $entity->getEntityTypeId())
      ->condition('entity_id', $entity->id())
      ->execute();
    if ($ids) {
      $storage->delete($storage->loadMultiple($ids));
    }
  }
}

/**
 * Implements hook_block_view_alter().
 *
 * Set the og_role cache contexts to the local tasks block.
 */
function joinup_invite_block_view_alter(array &$build, BlockPluginInterface $block) {
  if ($build['#id'] === 'primaryadminactions') {
    // The primaryadminactions contains the 'Add facilitator' link which is
    // accessible only to facilitators. The members page though is accessible
    // by members as well. If a normal member visits the page first, the block
    // is build without the og_role context and the form does not vary per group
    // role.
    // Make sure that the primaryadminactions block varies per og role.
    $cache_contexts = $build['#cache']['contexts'] ?? [];
    $build['#cache']['contexts'] = Cache::mergeContexts($cache_contexts, ['og_role']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Deletes the membership related to the invitation deleted.
 */
function joinup_invite_invitation_delete(EntityInterface $entity) {
  $user = $entity->getRecipient();
  $group = $entity->getEntity();
  $states = [
    OgMembershipInterface::STATE_ACTIVE,
    OgMembershipInterface::STATE_BLOCKED,
    OgMembershipInterface::STATE_PENDING,
  ];

  /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
  $membership_manager = \Drupal::service('og.membership_manager');
  $membership = $membership_manager->getMembership($group, $user, $states);
  if (!empty($membership)) {
    $membership->skip_notification = 1;
    $membership->delete();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * If a membership is deleted and an invitation exists for the same group and
 * user, delete the invitation as well.
 */
function joinup_invite_og_membership_delete(OgMembershipInterface $entity) {
  $invitations = \Drupal::entityTypeManager()->getStorage('invitation')->loadByProperties([
    'entity_type' => $entity->getGroupEntityType(),
    'entity_id' => $entity->getGroupId(),
    'recipient_id' => $entity->getOwnerId(),
    'bundle' => 'group',
  ]);

  // Normally, only one invitation should exist per entity and user, but iterate
  // nonetheless.
  foreach ($invitations as $invitation) {
    $invitation->delete();
  }
}
