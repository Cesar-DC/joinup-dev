<?php

/**
 * @file
 * Contains hooks regarding the solution rdf entity bundle.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\og\Entity\OgMembership;
use Drupal\og\Entity\OgRole;
use Drupal\og\OgRoleInterface;
use Drupal\rdf_entity\Entity\Rdf;
use Drupal\rdf_entity\Entity\RdfEntityType;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function solution_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() == 'rdf_entity' && $bundle == 'solution' && !empty($fields['label'])) {
    $fields['label']->addConstraint('UniqueSolutionTitle', []);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * This function grants the 'owner' and 'facilitator' roles to the user that
 * creates the solution.
 *
 * @see https://www.w3.org/TR/vocab-adms/#the-adms-domain-model
 */
function solution_rdf_entity_insert(EntityInterface $entity) {
  if ($entity->bundle() !== 'solution') {
    return;
  }

  // When a new solution is created, give the current user the 'group owner'
  // role, if it is not the anonymous user.
  if (!\Drupal::currentUser()->isAnonymous()) {
    // The group owner inherits all roles of a solution facilitator and
    // administrator.
    $roles = [
      'rdf_entity-solution-' . OgRoleInterface::ADMINISTRATOR,
      'rdf_entity-solution-facilitator',
    ];

    /** @var \Drupal\og\OgMembershipInterface $membership */
    $membership = OgMembership::create();
    $membership
      ->setUser(\Drupal::currentUser())
      ->setGroup($entity)
      ->setRoles(array_values(OgRole::loadMultiple($roles)))
      ->save();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function solution_form_rdf_entity_solution_form_alter(array &$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  if (!empty($form_state->getStorage()['collection']) && $entity->bundle() == 'solution' && $entity->isNew()) {
    $form['actions']['submit']['#submit'][] = 'solution_add_form_parent_submit';
  }
}

/**
 * Links the solution to the collection to which it belongs.
 *
 * According to the ADMS model, the linked solutions of a collection are
 * stored as a property of the collection itself, called affiliates.
 * The process of linking a solution to a collection is:
 * - Request an affiliation. This request is registered by adding the
 *   collection to the affiliation_request field of the solution.
 * - Accept the affiliation. The collection is removed from the affiliation
 *   request of the solution and the solution is added to the affiliates
 *   field of the collection.
 * In order for a solution to be affiliated with a collection when it is
 * created, the collection should be passed to the form_state object.
 */
function solution_add_form_parent_submit(array &$form, FormStateInterface $form_state) {
  $collection = Rdf::load($form_state->getStorage()['collection']);
  if (empty($collection) || $collection->bundle() !== 'collection') {
    throw new \Exception('Only collections can be referenced in affiliation requests.');
  }
  $entity_id = $form_state->getFormObject()->getEntity()->id();
  $values = $collection->get('field_ar_affiliates')->getValue();
  $values[] = ['target_id' => $entity_id];
  $collection->set('field_ar_affiliates', $values);
  $collection->save();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Interrupts the permissions for updating a solution. The permission is not
 * granted if there are no transitions allowed for the current state of the
 * node.
 */
function solution_rdf_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->bundle() != 'solution') {
    return AccessResult::neutral();
  }

  if ($operation == 'edit') {
    $allowed_transitions = $entity->get('field_is_state')->first()->getTransitions();
    if (empty($allowed_transitions)) {
      return AccessResult::forbidden();
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_extra_field_info().
 */
function solution_entity_extra_field_info() {
  $fields = [];

  $solution = RdfEntityType::load('solution');
  $fields['rdf_entity'][$solution->id()]['display']['releases_overview'] = [
    'label' => t('Releases overview'),
    'description' => t('A link to the releases overview page'),
    'visible' => FALSE,
  ];

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function solution_rdf_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() != 'solution') {
    return;
  }

  if ($display->getComponent('releases_overview')) {
    $build['releases_overview'] = [
      '#type' => 'link',
      '#title' => t('Download'),
      '#url' => Url::fromRoute('asset_release.solution_asset_release.overview', [
        'rdf_entity' => $entity->id(),
      ]),
      '#attributes' => array('class' => 'button--default button--blue-light mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent'),
    ];
  }
}
