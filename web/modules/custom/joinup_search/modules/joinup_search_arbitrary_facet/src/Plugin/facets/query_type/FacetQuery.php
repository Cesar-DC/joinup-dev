<?php

namespace Drupal\joinup_search_arbitrary_facet\Plugin\facets\query_type;

use Drupal\facets\Plugin\facets\query_type\SearchApiString;
use Drupal\facets\Result\Result;

/**
 * Provides supports for facets generated by arbitrary queries.
 *
 * @see https://wiki.apache.org/solr/SimpleFacetParameters#facet.query_:_Arbitrary_Query_Faceting
 *
 * @FacetsQueryType(
 *   id = "facet_query",
 *   label = @Translation("Arbitrary facet query"),
 * )
 */
class FacetQuery extends SearchApiString {

  /**
   * {@inheritdoc}
   */
  public function execute() {
    $query = $this->query;

    if (!empty($query)) {
      $operator = $this->facet->getQueryOperator();
      $field_identifier = $this->facet->getFieldIdentifier();
      $exclude = $this->facet->getExclude();

      // Set the options for the actual query.
      $options = &$query->getOptions();
      $options['joinup_search_arbitrary_facet'][$field_identifier] = [
        'limit' => $this->facet->getHardLimit(),
        'operator' => $operator,
        'min_count' => $this->facet->getMinCount(),
        'missing' => FALSE,
      ];

      // Add the filter to the query if there are active values.
      $active_items = $this->facet->getActiveItems();

      if (count($active_items)) {
        $filter = $query->createConditionGroup($operator, ['facet:' . $field_identifier]);
        foreach ($active_items as $value) {
          switch ($value) {
            case 'mine':
              $converted = 'entity_author:' . \Drupal::currentUser()->id();
              break;

            case 'featured':
              $converted = 'site_featured:true';
              break;

            case 'collections':
            default:
              $converted = 'entity_bundle:collection';
              break;
          }

          list($a, $b) = explode(':', $converted);
          $filter->addCondition($a, $b, $exclude ? '<>' : '=');
        }
        $query->addConditionGroup($filter);
      }
    }
  }

  /**
   * {@inheritdoc}
   */
  public function build() {
    $query_operator = $this->facet->getQueryOperator();

    if (!empty($this->results)) {
      $facet_results = [];
      foreach ($this->results as $key => $result) {
        if ($result['count'] || $query_operator == 'or') {
          $count = $result['count'];
          $result_filter = trim($result['filter'], '"');
          $result = new Result($result_filter, $result_filter, $count);
          $facet_results[] = $result;
        }
      }
      $this->facet->setResults($facet_results);
    }

    return $this->facet;
  }

}
