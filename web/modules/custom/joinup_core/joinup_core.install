<?php

/**
 * @file
 * Install, uninstall, schema and requirements hook for Joinup.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Site\Settings;
use Drupal\rdf_entity\Entity\RdfEntityMapping;
use Drupal\user\Entity\User;

/**
 * Implements hook_requirements().
 *
 * Adds some additional security related warnings to the status report:
 * - UID1 should be blocked.
 * - Config Read Only should be enabled.
 */
function joinup_core_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    // Check if UID 1 is blocked. Not allowing to log in as the root user
    // greatly decreases the chances of a privilege escalation bug to do real
    // damage on production.
    /** @var \Drupal\user\UserInterface $uid1 */
    $uid1 = User::load(1);
    if (!$uid1->isBlocked()) {
      $requirements['joinup_core_root_user_blocked'] = [
        'title' => t('Root user access'),
        'description' => t('Allowing to log in as the root user on production is a security risk.'),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Root user is not blocked'),
      ];
    }

    // Check that the Config Read Only module is enabled and activated. This
    // module ensures that the site configuration is immutable. This greatly
    // enhances the security of the production environment, and ensures that no
    // changes are made on production which can be overwritten on a subsequent
    // update.
    /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
    $module_handler = \Drupal::service('module_handler');
    if (!$module_handler->moduleExists('config_readonly') || !Settings::get('config_readonly')) {
      $requirements['joinup_core_config_readonly'] = [
        'title' => t('Config Read Only'),
        'description' => t('On production environments the site configuration should be read-only.'),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Config is writable'),
      ];

    }
  }

  return $requirements;
}

/**
 * Enable the Config Sync module.
 */
function joinup_core_update_8100(&$sandbox) {
  \Drupal::service('module_installer')->install(['config_sync']);
}

/**
 * Delete the queue of the cached_computed_field module.
 */
function joinup_core_update_8101() {
  $queue = \Drupal::queue('cached_computed_field_expired_fields', FALSE);
  $queue->deleteQueue();
}

/**
 * Update the predicates for fields 'solution_type' and 'test_resource_type'.
 */
function joinup_core_update_8102() {
  /** @var \Drupal\Core\Database\Connection $connection */
  $connection = \Drupal::service('sparql_endpoint');
  $query = <<<QUERY
DELETE { GRAPH ?g { ?subject <http://purl.org/dc/terms/type> ?object } }
INSERT { GRAPH ?g { ?subject <http://joinup.eu/test_resource_type> ?object } }
WHERE {
  GRAPH ?g { ?subject <http://purl.org/dc/terms/type> ?object } .
  VALUES ?g {
    <http://joinup.eu/solution/draft>
    <http://joinup.eu/solution/published>
    <http://joinup.eu/asset_release/draft>
    <http://joinup.eu/asset_release/published>
  }
}
QUERY;
  $connection->query($query);
  $query = <<<QUERY
DELETE { GRAPH ?g { ?subject <http://purl.org/dc/terms/DCMIType> ?object } }
INSERT { GRAPH ?g { ?subject <http://purl.org/dc/terms/type> ?object } }
WHERE {
  GRAPH ?g { ?subject <http://purl.org/dc/terms/DCMIType> ?object } .
  VALUES ?g {
    <http://joinup.eu/solution/draft>
    <http://joinup.eu/solution/published>
  }
}
QUERY;
  $connection->query($query);
}

/**
 * Fix the spatial coverage predicate for collections and solutions.
 */
function joinup_core_update_8103() {
  /** @var \Drupal\Core\Database\Connection $connection */
  $connection = \Drupal::service('sparql_endpoint');
  $query = <<<QUERY
DELETE { GRAPH ?g { ?subject <http://www.w3.org/ns/dcat#spatial> ?object } }
INSERT { GRAPH ?g { ?subject <http://purl.org/dc/terms/spatial> ?object } }
WHERE {
  GRAPH ?g { ?subject <http://www.w3.org/ns/dcat#spatial> ?object } .
  VALUES ?g {
    <http://joinup.eu/collection/published>
    <http://joinup.eu/collection/draft>
    <http://joinup.eu/solution/published>
    <http://joinup.eu/solution/draft>
  }
}
QUERY;
  $connection->query($query);
}

/**
 * Fix the documentation predicate.
 */
function joinup_core_update_8104() {
  /** @var \Drupal\Core\Database\Connection $query */
  $connection = \Drupal::service('sparql_endpoint');
  $query = <<<QUERY
DELETE { GRAPH ?g { ?subject <http://xmlns.com/foaf/spec/#term_page> ?object } }
INSERT { GRAPH ?g { ?subject <http://xmlns.com/foaf/0.1/page> ?object } }
WHERE {
  GRAPH ?g { ?subject <http://xmlns.com/foaf/spec/#term_page> ?object } .
  VALUES ?g {
    <http://joinup.eu/solution/published>
    <http://joinup.eu/solution/draft>
    <http://joinup.eu/asset_release/published>
    <http://joinup.eu/asset_release/draft>
  }
}
QUERY;
  $connection->query($query);
}

/**
 * Fix the release notes predicate.
 */
function joinup_core_update_8105() {
  /** @var \Drupal\Core\Database\Connection $query */
  $connection = \Drupal::service('sparql_endpoint');
  $query = <<<QUERY
DELETE { GRAPH ?g { ?subject <https://www.w3.org/TR/vocab-adms/#adms-versionnotes> ?object } }
INSERT { GRAPH ?g { ?subject <http://www.w3.org/ns/adms#versionNotes> ?object } }
WHERE {
  GRAPH ?g { ?subject <https://www.w3.org/TR/vocab-adms/#adms-versionnotes> ?object } .
  VALUES ?g {
    <http://joinup.eu/asset_release/published>
    <http://joinup.eu/asset_release/draft>
  }
}
QUERY;
  $connection->query($query);
}

/**
 * Update the type of collections, solutions, releases and distributions.
 *
 * Two things will happen here.
 * The first is that all related field mappings will be updated.
 * The second is that all entities in the database will be updated.
 */
function joinup_core_update_8106() {
  $entity_type_id = 'rdf_entity';
  $query = Database::getConnection('default', 'sparql_default');
  $bundles = [
    'collection' => [
      'old_uri' => 'http://www.w3.org/ns/adms#AssetRepository',
      'new_uri' => 'http://www.w3.org/ns/dcat#Catalog',
    ],
    'solution' => [
      'old_uri' => 'http://www.w3.org/ns/adms#Asset',
      'new_uri' => 'http://www.w3.org/ns/dcat#Dataset',
    ],
    'asset_release' => [
      'old_uri' => 'http://www.w3.org/ns/adms#Asset',
      'new_uri' => 'http://www.w3.org/ns/dcat#Dataset',
    ],
    'asset_distribution' => [
      'old_uri' => 'http://www.w3.org/ns/adms#AssetDistribution',
      'new_uri' => 'http://www.w3.org/ns/dcat#Distribution',
    ],
  ];

  $bundle_predicate = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';
  foreach ($bundles as $bundle => $properties) {
    $rdf_entity_mapping = RdfEntityMapping::loadByName($entity_type_id, $bundle);

    // Update the mappings.
    $rdf_entity_mapping->setRdfType($properties['new_uri']);
    $rdf_entity_mapping->save();

    // Update the entities.
    $graphs = $rdf_entity_mapping->getGraphs();
    foreach ($graphs as $graph_uri) {
      // Keep counters in order to verify the results.
      $init_old = _joinup_core_get_entity_count($graph_uri, $properties['old_uri']);
      $init_new = _joinup_core_get_entity_count($graph_uri, $properties['new_uri']);

      $query_string = <<<QUERY
WITH <{$graph_uri}>
DELETE { ?entity <{$bundle_predicate}> <{$properties['old_uri']}> }
INSERT { ?entity <{$bundle_predicate}> <{$properties['new_uri']}> }
WHERE { ?entity <{$bundle_predicate}> <{$properties['old_uri']}> }
QUERY;
      $query->query($query_string);

      // Generate the new counters for comparison.
      $final_old = _joinup_core_get_entity_count($graph_uri, $properties['old_uri']);
      $final_new = _joinup_core_get_entity_count($graph_uri, $properties['new_uri']);

      if ($init_old !== $final_new || !empty($init_new) || !empty($final_old)) {
        throw new Exception("Results are not matching.");
      }
    }
  }
}

/**
 * Counts the amount of entities of a given type uri in a given graph.
 *
 * The method uses a direct query.
 *
 * @param string $graph_uri
 *   The graph uri.
 * @param string $type_uri
 *   The type uri.
 *
 * @return int
 *   The amount of entities.
 */
function _joinup_core_get_entity_count($graph_uri, $type_uri) {
  $query = Database::getConnection('default', 'sparql_default');
  $count_query = <<<QUERY
  SELECT COUNT(?entity) AS ?count
  FROM <{$graph_uri}>
  WHERE {
    ?entity <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <{$type_uri}>
  }
QUERY;
  $results = $query->query($count_query);
  return reset($results)->count->getValue();
}
