<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_entity_bundle_field_info().
 */
function rdf_entity_provenance_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  if ($entity_type->id() !== 'rdf_entity' || $bundle !== 'provenance_activity') {
    return [];
  }

  $fields = [];

  // The time that the activity started to federate the remote entity. This is
  // different from the created date as it can be updated if the entity is
  // federated again.
  // @see: https://www.w3.org/TR/2013/REC-prov-o-20130430/#startedAtTime
  $fields['provenance_started'] = BaseFieldDefinition::create('timestamp')
    ->setLabel(t('Provenance - Created'))
    ->setDescription(t('The time that the provenance entity was created.'))
    ->setComputed(FALSE)
    ->setCardinality(1)
    ->setRequired(FALSE);

  // The source of the entity is a link to the Agent. However, an Agent property
  // is not strictly needed so this will be a link towards the source of the
  // entity.
  // @see: https://www.w3.org/TR/2013/REC-prov-o-20130430/#wasAssociatedWith
  $fields['provenance_associated_with'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Provenance - Source'))
    ->setDescription(t('The source that this entity was derived from.'))
    ->setComputed(FALSE)
    ->setCardinality(1)
    ->setRequired(FALSE);

  // A link towards the created local entity.
  // @see: https://www.w3.org/TR/2013/REC-prov-o-20130430/#generated.
  $fields['provenance_entity'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Provenance - Entity'))
    ->setDescription(t('The entity that was generated by this activity.'))
    ->setComputed(FALSE)
    ->setCardinality(1)
    ->setRequired(FALSE);

  // This field is not part of the provenance schema but will be used to
  // blacklist entities so that they are not imported.
  $fields['provenance_enabled'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Provenance - Enabled'))
    ->setDescription(t('If set to false, the entity will not be federated.'))
    ->setComputed(FALSE)
    ->setDefaultValue(TRUE)
    ->setCardinality(1)
    ->setRequired(FALSE);

  return $fields;
}