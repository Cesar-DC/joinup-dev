<?php

/**
 * @file
 * Provides functionality for the contact information module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function contact_information_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() == 'rdf_entity' && $bundle == 'contact_information' && !empty($fields['field_ci_email'])) {
    $fields['field_ci_email']->addConstraint('JoinupEmail');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Concatenates the names into a single string. This entity has support for
 * multiple names and entity label does not support this. For this reason,
 * the label actually inherits all values from field_ci_name field.
 */
function contact_information_rdf_entity_presave(EntityInterface $entity) {
  // Handle only contact information entities.
  if ($entity->bundle() != 'contact_information') {
    return;
  }

  // Generate the label using the values of the name field.
  $names = array_column($entity->get('field_ci_name')->getValue(), 'value');
  $entity->set('label', implode(', ', $names));
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 *
 * Alters the name of the header of the entity column in the inline entity form
 * table in the create form. Header label was 'title' before.
 */
function contact_information_inline_entity_form_table_fields_alter(&$fields, $context) {
  // Replace the label in the contact information table.
  if (
    $context['entity_type'] == 'rdf_entity' &&
    $context['allowed_bundles'] === ['contact_information'] &&
    isset($fields['label'])
  ) {
    $fields['label']['label'] = t('Name');
  }
}
