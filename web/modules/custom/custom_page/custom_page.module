<?php

/**
 * @file
 * Main functions and hook implementations of the custom page module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\og\Entity\OgMembership;
use Drupal\user\Entity\User;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function custom_page_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() == 'node' && $bundle == 'custom_page') {
    if (!empty($fields['title'])) {
      $fields['title']->addConstraint('UniqueFieldInBundle', ['bundles' => ['custom_page']]);
    }
  }
}

/**
 * Implements hook_og_membership_insert().
 *
 * We will invalidate the specific user's rdf_entity tag based cache
 * every time a new membership is inserted..
 * The reason behind this is that we want to cache content per users
 * e.g. blocks. OG invalidates the cache of the specific user's membership
 * when the membership is updated or deleted but flushes all membership list
 * when a new membership is created.
 * This will have an impact to the performance if we had to flush all the
 * membership specific content for all users every time a membership is created.
 *
 * @var \Drupal\og\Entity\OgMembership $og_membership
 *  The membership that has just been inserted.
 */
function custom_page_og_membership_insert(OgMembership $og_membership) {
  $account = \Drupal::currentUser();
  $current_user = User::load($account->id());
  $tag = 'rdf_entity:' . $current_user->getEntityTypeId() . ':' . $current_user->id();

  Cache::invalidateTags([$tag]);
}
