<?xml version="1.0" encoding="UTF-8" ?>


<project name="UAT" default="help">

    <!-- Target used to quickly create the settings.php, settings.local.php and
        services.yml files, without needing to go through all install process.
        Useful on environments, as the UAT, where the production databases are
        used but the settings files still need to be rebuilt. -->
    <target name="create-uat-settings" description="Creates the Drupal settings.php, settings.local.php and services.yml without needing to run the whole install.">

        <!-- settings.php -->

        <!-- Create settings.php. Override any existing file. -->
        <copy file="${website.settings.php.default}" tofile="${website.settings.php}" overwrite="true"/>

        <!-- Make use of settings.local.php in settings.php. -->
        <phingcall target="include-local-settings" />

        <!-- Create the config/sync directory. Not used. -->
        <mkdir dir="config/sync" />

        <!-- Store in the site.hash_salt property the generated site hash salt,
            using the Drupal Crypt component. -->
        <exec command="php -r 'require_once(&quot;./web/autoload.php&quot;);print \Drupal\Component\Utility\Crypt::randomBytesBase64(55);'"
               outputProperty="site.hash_salt"/>

        <!-- Add the site hash salt, MySQL and Virtuoso connections, config sync
            directories and the install profile in settings.php. -->
        <append destFile="${website.settings.php}">
$settings['hash_salt'] = '${site.hash_salt}';

$databases['default']['default'] = [
  'database' => '${drupal.db.name}',
  'username' => '${drupal.db.user}',
  'password' => '${drupal.db.password}',
  'prefix' => '',
  'host' => '${drupal.db.host}',
  'port' => '${drupal.db.port}',
  'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
  'driver' => 'mysql',
];

$databases['sparql_default']['default'] = [
  'prefix' => '',
  'host' => '${sparql.host}',
  'port' => '${sparql.port}',
  'namespace' => '${sparql.namespace}',
  'driver' => 'sparql',
];

$config_directories['sync'] = '../config/sync';
$settings['install_profile'] = '${website.profile.name}';
</append>

        <!-- Setup the migration settings. -->
        <phingcall target="setup-migration" />

        <!-- Set the transaction type to READ-COMMITTED for MySQL. -->
        <phingcall target="set-mysql-transaction-type" />

        <!-- settings.local.php -->

        <!-- Create settings.local.php. Override any existing file. -->
        <copy file="${website.settings.local.php.example}" tofile="${website.settings.local.php}" overwrite="true" />

        <!-- Create and set the private files directory. -->
        <phingcall target="create-private-files-directory" />

        <!-- Configure the Apache Solr connection -->
        <phingcall target="configure-apache-solr-drupal" />

        <!-- Configure Matomo. -->
        <phingcall target="configure-matomo-drupal" />

        <!-- Configure the Stage File Proxy module. -->
        <phingcall target="configure-stage-file-proxy" />

        <!-- Add proxy configuration. -->
        <append destFile="${website.settings.local.php}">
if (php_sapi_name() !== 'cli') {
  if (isset($_SERVER['HTTP_CLOUDFRONT_FORWARDED_PROTO'])) {
    $base_url = $_SERVER['HTTP_CLOUDFRONT_FORWARDED_PROTO'] . '://' . "{$_SERVER['HTTP_HOST']}";
    if ($_SERVER['HTTP_CLOUDFRONT_FORWARDED_PROTO'] == 'https') {
      $_SERVER['HTTPS'] = 'on';
      $_SERVER['HTTP_X_FORWARDED_PORT'] = 443;
    }
    else {
      $_SERVER['HTTPS'] = '';
    }
  }
  $settings['reverse_proxy'] = TRUE;
  $settings['reverse_proxy_proto_header'] = 'CLOUDFRONT_FORWARDED_PROTO';
  $settings['reverse_proxy_port_header'] = 'CLOUDFRONT_FORWARDED_PORT';
  $settings['reverse_proxy_header'] = 'X_FORWARDED_FOR';
  $settings['reverse_proxy_addresses'] = [$_SERVER['REMOTE_ADDR']];
}
</append>

        <!-- Allow to disable config_readonly by creating a `disable-config-readonly` file in the project root. -->
        <phingcall target="configure-config-readonly-disabling" />

        <!-- services.yml -->

        <!-- Create services.yml. Override any existing file. -->
        <copy file="${website.services.yml.default}" tofile="${website.services.yml}" overwrite="true"/>

        <!-- Disable persistent session cookies in services.yml. -->
        <phingcall target="disable-persistent-session-cookies" />

    </target>

    <!-- Allow to disable config_readonly by creating a file named `disable-config-readonly` in the project root. -->
    <target name="configure-config-readonly-disabling"
            description="Allow to disable config_readonly by creating a file named `disable-config-readonly` in the project root."
            depends="enable-dev-settings, writable-settings-folder, writable-settings-local-php">

        <!-- Avoid duplicates in settings.local.php, if the file already exists. -->
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.local.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                            pattern="^\$settings\['config_readonly'\].*$\n"
                            replace=""
                            modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>

        <!-- Add the settings.local.php setting. -->
        <append destFile="${website.settings.local.php}" text="$settings['config_readonly'] = !file_exists(getcwd() . '/../disable-config-readonly');${line.separator}" />
    </target>

</project>
